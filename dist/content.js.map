{"version":3,"file":"content.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://kavach-trial/webpack/bootstrap","webpack://kavach-trial/webpack/runtime/make namespace object","webpack://kavach-trial/./src/content/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Content script for detecting privacy policies and injecting tracking detection\nclass ContentScript {\n    constructor() {\n        this.privacyPolicyUrls = [];\n        console.log('🔍 Kavach Content Script starting on:', window.location.href);\n        this.detectPrivacyPolicies();\n        this.injectTrackingDetector();\n        console.log('✅ Kavach Content Script initialized');\n    }\n    detectPrivacyPolicies() {\n        // Look for privacy policy links with better detection\n        const selectors = [\n            'a[href*=\"privacy\"]',\n            'a[href*=\"terms\"]',\n            'a[href*=\"policy\"]',\n            'a[href*=\"legal\"]',\n            'a[href*=\"gdpr\"]',\n            'a[href*=\"ccpa\"]'\n        ];\n        const privacyKeywords = [\n            'privacy policy',\n            'privacy statement',\n            'privacy notice',\n            'terms of service',\n            'terms and conditions',\n            'data policy',\n            'cookie policy',\n            'legal',\n            'gdpr',\n            'ccpa'\n        ];\n        // Check link hrefs and text content\n        selectors.forEach(selector => {\n            const links = document.querySelectorAll(selector);\n            links.forEach(link => {\n                const href = link.href;\n                const text = link.textContent?.toLowerCase() || '';\n                if (href && !this.privacyPolicyUrls.includes(href)) {\n                    // Check if the link text contains privacy-related keywords\n                    const isPrivacyRelated = privacyKeywords.some(keyword => text.includes(keyword) || href.toLowerCase().includes(keyword));\n                    if (isPrivacyRelated) {\n                        this.privacyPolicyUrls.push(href);\n                    }\n                }\n            });\n        });\n        // Also check for common footer links\n        const footerElements = document.querySelectorAll('footer, .footer, [class*=\"footer\"]');\n        footerElements.forEach(footer => {\n            const links = footer.querySelectorAll('a');\n            links.forEach(link => {\n                const href = link.href;\n                const text = link.textContent?.toLowerCase() || '';\n                if (href && !this.privacyPolicyUrls.includes(href)) {\n                    const isPrivacyRelated = privacyKeywords.some(keyword => text.includes(keyword));\n                    if (isPrivacyRelated) {\n                        this.privacyPolicyUrls.push(href);\n                    }\n                }\n            });\n        });\n        // Send privacy policy URLs to background script\n        if (this.privacyPolicyUrls.length > 0) {\n            chrome.runtime.sendMessage({\n                action: 'privacyPoliciesFound',\n                urls: this.privacyPolicyUrls,\n                currentUrl: window.location.href\n            }).catch(error => {\n                console.log('Failed to send privacy policy URLs:', error);\n            });\n        }\n    }\n    injectTrackingDetector() {\n        // Inject script to detect client-side tracking\n        const script = document.createElement('script');\n        script.src = chrome.runtime.getURL('injected.js');\n        script.onload = function () {\n            // Remove the script element after loading\n            this.remove();\n        };\n        (document.head || document.documentElement).appendChild(script);\n    }\n    init() {\n        // Initialize after DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => {\n                setTimeout(() => {\n                    // Re-scan for privacy policies after DOM is fully loaded\n                    this.detectPrivacyPolicies();\n                }, 1000);\n            });\n        }\n        else {\n            setTimeout(() => {\n                // Re-scan for privacy policies\n                this.detectPrivacyPolicies();\n            }, 1000);\n        }\n        // Also scan again after a delay to catch dynamically loaded content\n        setTimeout(() => {\n            this.detectPrivacyPolicies();\n        }, 3000);\n    }\n}\nconst contentScript = new ContentScript();\ncontentScript.init();\nexport {};\n"],"names":[],"sourceRoot":""}